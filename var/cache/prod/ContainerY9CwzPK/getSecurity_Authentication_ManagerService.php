<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'security.authentication.manager' shared service.

include_once $this->targetDirs[3].'\\vendor\\symfony\\security\\Core\\Authentication\\AuthenticationManagerInterface.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\security\\Core\\Authentication\\AuthenticationProviderManager.php';

$this->privates['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(new RewindableGenerator(function () {
    yield 0 => ($this->privates['security.authentication.provider.two_factor.contao_backend'] ?? $this->load('getSecurity_Authentication_Provider_TwoFactor_ContaoBackendService.php'));
    yield 1 => ($this->privates['contao.security.authentication_provider.contao_backend.two_factor_decorator'] ?? $this->load('getContao_Security_AuthenticationProvider_ContaoBackend_TwoFactorDecoratorService.php'));
    yield 2 => ($this->privates['security.authentication.provider.anonymous.contao_backend.two_factor_decorator'] ?? $this->load('getSecurity_Authentication_Provider_Anonymous_ContaoBackend_TwoFactorDecoratorService.php'));
    yield 3 => ($this->privates['contao.security.authentication_provider.contao_frontend.two_factor_decorator'] ?? $this->load('getContao_Security_AuthenticationProvider_ContaoFrontend_TwoFactorDecoratorService.php'));
    yield 4 => ($this->privates['security.authentication.provider.rememberme.contao_frontend.two_factor_decorator'] ?? $this->load('getSecurity_Authentication_Provider_Rememberme_ContaoFrontend_TwoFactorDecoratorService.php'));
    yield 5 => ($this->privates['security.authentication.provider.anonymous.contao_frontend.two_factor_decorator'] ?? $this->load('getSecurity_Authentication_Provider_Anonymous_ContaoFrontend_TwoFactorDecoratorService.php'));
}, 6), true);

$instance->setEventDispatcher(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));

return $instance;
