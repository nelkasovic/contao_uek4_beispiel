<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'fragment.handler' shared service.

include_once $this->targetDirs[3].'\\vendor\\symfony\\http-kernel\\Fragment\\FragmentHandler.php';
include_once $this->targetDirs[3].'\\vendor\\contao\\core-bundle\\src\\Fragment\\FragmentHandler.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\http-kernel\\DependencyInjection\\LazyLoadingFragmentHandler.php';

$a = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, [
    'esi' => ['privates', 'fragment.renderer.esi', 'getFragment_Renderer_EsiService.php', true],
    'forward' => ['privates', 'contao.fragment.renderer.forward', 'getContao_Fragment_Renderer_ForwardService.php', true],
    'hinclude' => ['privates', 'fragment.renderer.hinclude', 'getFragment_Renderer_HincludeService.php', true],
    'inline' => ['privates', 'fragment.renderer.inline', 'getFragment_Renderer_InlineService.php', true],
]);
$b = ($this->services['request_stack'] ?? ($this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack()));

return $this->services['fragment.handler'] = new \Contao\CoreBundle\Fragment\FragmentHandler($a, new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler($a, $b, false), $b, ($this->privates['contao.fragment.registry'] ?? ($this->privates['contao.fragment.registry'] = new \Contao\CoreBundle\Fragment\FragmentRegistry())), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($this->getService, []), false);
